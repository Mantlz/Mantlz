generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  clerkId          String   @unique
  email            String   @unique
  firstName        String?
  lastName         String?
  imageUrl         String?
  quotaLimit       Int      @default(200) // Default to FREE_QUOTA.maxSubmissionsPerMonth
  resendApiKey     String?
  stripeCustomerId String?  @unique
  plan             Plan     @default(FREE)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  forms            Form[]
  quota            Quota[]
  apiKeys          ApiKey[]
  globalSettings   GlobalSettings?
  subscription     Subscription?
  payments         Payment[]
  invoices         Invoice[]
  campaigns        Campaign[]

  @@index([clerkId])
  @@index([stripeCustomerId])
}

model Subscription {
  id                     String           @id @default(uuid())
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  subscriptionId         String           @unique
  stripeUserId           String
  status                 SubscriptionStatus
  startDate              DateTime
  endDate                DateTime?
  planId                 String
  defaultPaymentMethodId String?
  email                  String
  clerkId                String
  user                   User             @relation(fields: [userId], references: [id])
  userId                 String           @unique
  plan                   SubscriptionPlan @relation(fields: [planId], references: [id])

  @@index([clerkId, subscriptionId])
}

model SubscriptionPlan {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  planId         String         @unique
  name           String         @unique
  description    String
  amount         Decimal
  currency       String
  maxForms       Int           // Maximum number of forms allowed
  maxSubmissionsPerMonth Int   // Maximum submissions per month
  subscriptions  Subscription[]
}

model Payment {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  stripeId        String   @unique
  email           String
  amount          Decimal
  paymentTime     DateTime
  currency        String
  clerkId         String
  customerDetails Json
  paymentIntent   String
  user            User     @relation(fields: [userId], references: [id])
  userId          String

  @@index([clerkId, stripeId])
}

model Invoice {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  invoiceId      String   @unique
  subscriptionId String?
  amountPaid     Decimal
  amountDue      Decimal?
  currency       String
  status         InvoiceStatus
  email          String
  clerkId        String   // Make this required since we're using userId
  user           User     @relation(fields: [userId], references: [id])
  userId         String

  @@index([clerkId, invoiceId])
}

model Quota {
  id        String   @id @default(cuid())
  userId    String
  year      Int
  month     Int
  count     Int      @default(0)
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Form {
  id          String       @id @default(cuid())
  name        String
  description String?
  schema      String
  userId      String
  settings    Json?
  formType    FormType     @default(CUSTOM)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  submissions Submission[]
  emailSettings EmailSettings?
  notificationLogs NotificationLog[]
  campaigns   Campaign[]

  @@index([userId, formType])
  @@index([userId])
}

model EmailSettings {
  id          String   @id @default(cuid())
  formId      String   @unique
  form        Form     @relation(fields: [formId], references: [id])
  enabled     Boolean  @default(false)
  fromEmail   String?
  subject     String?
  template    String?
  replyTo     String?
  // Developer notification settings
  developerNotificationsEnabled Boolean @default(false)
  developerEmail String?
  maxNotificationsPerHour Int @default(10)
  notificationConditions Json?
  lastNotificationSentAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Submission {
  id        String   @id @default(cuid())
  data      Json
  formId    String
  email     String?
  createdAt DateTime @default(now())
  form      Form     @relation(fields: [formId], references: [id])
  notificationLogs NotificationLog[]
  campaignRecipients CampaignRecipient[]

  @@unique([formId, email])
  @@index([email])
}

model ApiKey {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  lastUsedAt  DateTime @updatedAt
  isActive    Boolean  @default(true)

  @@index([key])
}

// New model for notification logs
model NotificationLog {
  id           String   @id @default(cuid())
  formId       String
  form         Form     @relation(fields: [formId], references: [id])
  submissionId String
  submission   Submission @relation(fields: [submissionId], references: [id])
  type         String
  status       NotificationStatus   @default(SENT)
  error        String?
  metadata     Json?
  createdAt    DateTime @default(now())

  @@index([formId, type])
  @@index([createdAt])
  @@index([status])
}

// New model for global settings
model GlobalSettings {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  developerNotificationsEnabled Boolean @default(false)
  maxNotificationsPerHour Int @default(10)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Campaign models
model Campaign {
  id          String   @id @default(cuid())
  name        String
  description String?
  subject     String
  content     String
  formId      String
  form        Form     @relation(fields: [formId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  status      CampaignStatus @default(DRAFT)
  filterSettings Json?
  sentCount   Int      @default(0)
  openCount   Int      @default(0)
  clickCount  Int      @default(0)
  senderEmail String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  recipients  CampaignRecipient[]

  @@index([userId, status])
  @@index([formId])
}

model CampaignRecipient {
  id          String   @id @default(cuid())
  campaignId  String
  campaign    Campaign @relation(fields: [campaignId], references: [id])
  submissionId String
  submission  Submission @relation(fields: [submissionId], references: [id])
  email       String
  status      CampaignSendStatus @default(PENDING)
  sentAt      DateTime?
  openedAt    DateTime?
  clickedAt   DateTime?
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([campaignId, status])
  @@index([submissionId])
  @@index([email])
}

enum DigestFrequency {
  REALTIME
  HOURLY
  DAILY
  WEEKLY
}

enum NotificationType {
  SUBMISSION_CONFIRMATION
  DEVELOPER_NOTIFICATION
  DIGEST
}

enum NotificationStatus {
  SENT
  FAILED
  SKIPPED
}

enum FormType {
  WAITLIST
  FEEDBACK
  CONTACT
  CUSTOM
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  TRIALING
  UNPAID
}

enum InvoiceStatus {
  PAID
  OPEN
  VOID
  UNCOLLECTIBLE
  ATTEMPTED
}

enum Plan {
  FREE
  STANDARD
  PRO
}

// Add new enums for Campaign status
enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  FAILED
  CANCELLED
}

enum CampaignSendStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
  OPENED
  CLICKED
}
