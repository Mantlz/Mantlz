generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  clerkId    String   @unique
  email      String   @unique
  firstName  String?
  lastName   String?
  imageUrl   String?
  quotaLimit Int
  plan       Plan     @default(FREE)
  resendApiKey String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  forms      Form[]
  quota      Quota[]
  apiKeys    ApiKey[]
  campaigns  Campaign[]
  templates  Template[]
  lists      RecipientList[]

  @@index([clerkId])
}

model Quota {
  id        String   @id @default(cuid())
  userId    String
  year      Int
  month     Int
  count     Int      @default(0)
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Form {
  id          String       @id @default(cuid())
  name        String
  description String?
  schema      String
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  submissions Submission[]
  emailSettings EmailSettings?
}

model EmailSettings {
  id          String   @id @default(cuid())
  formId      String   @unique
  form        Form     @relation(fields: [formId], references: [id])
  enabled     Boolean  @default(false)
  fromEmail   String?
  subject     String?
  template    String?
  replyTo     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Submission {
  id        String   @id @default(cuid())
  data      Json
  formId    String
  email     String?
  createdAt DateTime @default(now())
  form      Form     @relation(fields: [formId], references: [id])

  @@unique([formId, email])
  @@index([email])
}

model ApiKey {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  lastUsedAt  DateTime @updatedAt
  isActive    Boolean  @default(true)

  @@index([key])
}

model Campaign {
  id              String         @id @default(cuid())
  name            String
  description     String?
  status          CampaignStatus @default(DRAFT)
  fromName        String
  fromEmail       String
  replyTo         String?
  subject         String
  previewText     String?
  content         String        // HTML content
  templateId      String?
  userId          String
  listId          String?
  scheduledFor    DateTime?
  sentAt          DateTime?
  totalRecipients Int           @default(0)
  openCount       Int           @default(0)
  clickCount      Int           @default(0)
  bounceCount     Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  user            User          @relation(fields: [userId], references: [id])
  template        Template?     @relation(fields: [templateId], references: [id])
  list            RecipientList? @relation(fields: [listId], references: [id])
  events          CampaignEvent[]
  
  @@index([userId])
  @@index([templateId])
  @@index([listId])
}

model Template {
  id          String     @id @default(cuid())
  name        String
  description String?
  content     String     // HTML content
  thumbnail   String?    // URL to template preview image
  isDefault   Boolean    @default(false)
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  user        User       @relation(fields: [userId], references: [id])
  campaigns   Campaign[]

  @@index([userId])
}

model RecipientList {
  id          String     @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  user        User       @relation(fields: [userId], references: [id])
  recipients  Recipient[]
  campaigns   Campaign[]

  @@index([userId])
}

model Recipient {
  id          String       @id @default(cuid())
  email       String
  firstName   String?
  lastName    String?
  metadata    Json?        // Additional custom fields
  listId      String
  status      RecipientStatus @default(SUBSCRIBED)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  list        RecipientList @relation(fields: [listId], references: [id])
  events      CampaignEvent[]

  @@unique([listId, email])
  @@index([email])
  @@index([listId])
}

model CampaignEvent {
  id          String       @id @default(cuid())
  campaignId  String
  recipientId String
  type        EventType
  metadata    Json?        // Additional event data
  createdAt   DateTime     @default(now())
  
  campaign    Campaign     @relation(fields: [campaignId], references: [id])
  recipient   Recipient    @relation(fields: [recipientId], references: [id])

  @@index([campaignId])
  @@index([recipientId])
  @@index([type])
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  FAILED
  CANCELLED
}

enum RecipientStatus {
  SUBSCRIBED
  UNSUBSCRIBED
  BOUNCED
  COMPLAINED
}

enum EventType {
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  COMPLAINED
  UNSUBSCRIBED
}

enum Plan {
  FREE
  STANDARD
  PRO
}
