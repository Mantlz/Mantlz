# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
      args:
        # Increase Node memory limit for the build
        NODE_OPTIONS: "--max-old-space-size=8192"
    environment:
      # Node
      NODE_ENV: ${NODE_ENV:-development}
      NODE_OPTIONS: "--max-old-space-size=4096"
      
      # Development Controls
      ENABLE_CRON_IN_DEV: ${ENABLE_CRON_IN_DEV:-false}
      ENABLE_EMAIL_IN_DEV: ${ENABLE_EMAIL_IN_DEV:-false}
      CRON_SECRET: ${CRON_SECRET:-dev_secret}
      
      # Database
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@localhost:5432/mantlz?schema=public}
      

      
      # Sentry
      NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN:-https://dummy@dummy.ingest.sentry.io/0}
      
      # Redis
      UPSTASH_REDIS_REST_URL: ${UPSTASH_REDIS_REST_URL:-https://dummy-redis-url}
      UPSTASH_REDIS_REST_TOKEN: ${UPSTASH_REDIS_REST_TOKEN:-dummy_token}
      
      # Email
      RESEND_API_KEY: ${RESEND_API_KEY:-re_development_key}
      
      # Clerk Authentication
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:-pk_test}
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY:-sk_test}
      NEXT_PUBLIC_CLERK_SIGN_IN_URL: ${NEXT_PUBLIC_CLERK_SIGN_IN_URL:-/sign-in}
      NEXT_PUBLIC_CLERK_SIGN_UP_URL: ${NEXT_PUBLIC_CLERK_SIGN_UP_URL:-/sign-up}
      
      # Stripe
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-sk_test}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:-whsec_test}
      
      # App
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
    
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
    ports:
      - 3000:3000

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

